import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import random
import timeit
import math
hourly_rates = np.random.randint(0, high = 10, size = 110)

sz = 10
#print(timeit.timeit("hourly_rates.append([False])", setup = "import random; import numpy as np; hourly_rates =np.random.randint(0, high = 10, size = 10)", number = 100000), \
#      timeit.timeit("list(np.random.randint(0, high = 10, size = 10))", setup = "import random; import numpy as np", number = 100000))
#list(np.rand faster 1.3781812000088394 vs 0.3674951998982578
#swap to xrange in python 2, range in python 3
hourly_rates = np.random.randint(0, high = 10, size = 110)
#%% 
#Scenario: Battery must start, charge for 4 hours, completely discharge
#0.928313700016588

blocked_rates = np.array([np.mean(hourly_rates[i:i+4]) for i in range(len(hourly_rates) - 4)])#xrange for py2
increasing = np.array(blocked_rates[:-1] < blocked_rates[1:])#does NOT work with lists
inflect_up = list(increasing[:-1] < increasing[1:])#not increasing then is increasing; apparent have to wrap in list
inflect_up = [increasing[0]] + inflect_up + [False]#buy on first hour if increases after that, don't buy on last
inflect_down = list(increasing[:-1] > increasing[1:])
inflect_down = [False] + inflect_down + [increasing[-1]]#can't sell while empty; sell on last if increased up to that point
possible_profits = blocked_rates[inflect_down] - blocked_rates[inflect_up]
profits = np.zeros(len(hourly_rates)//24 + 1)
#which_trade = np.zeros(len(hourly_rates)//24 + 1, dtype = int)
day = 0

for i in range(len(hourly_rates)//24 + 1):
    num_possible = np.sum(inflect_up[i*24:i*24+24])
    profits[i] = np.max(possible_profits[day:day + num_possible])#can only charge once per day(could discharge twice)
    
#    which_trade[i] = list(possible_profits[day:day + num_possible]).index(profits[i])#plotting
#    which_trade[i] = i*24 + np.flatnonzero(np.array(inflect_up[i*24:i*24+24]) == True)[which_trade[i]]

    day += num_possible

#plotting
a = ["black" if i == j else "green" if i else "red" for i,j in zip(inflect_up, inflect_down)]
plot_lmt = 40
dayz = plot_lmt//24 #math.ceil(plot_lmt/24)
plt.bar(range(len(blocked_rates[:plot_lmt])), blocked_rates[:plot_lmt], color = a)
for i in range(len(blocked_rates[:plot_lmt])//24 + 1):#deliniates days
    plt.axvline(x = i*24)#change type? 
plt.scatter(which_trade[:dayz], profits[:dayz] + blocked_rates[which_trade[:dayz]])

#%%Trying to get a faster implementation of above
#pre-define inflect_up?Grib
#9.513454200001433
hourly_rates = np.random.randint(0, high = 10, size = 1100)

def best_of_block1(hourly_rates = hourly_rates):
    blocked_rates = np.array([np.mean(hourly_rates[i:i+4]) for i in range(len(hourly_rates) - 4)])#xrange for py2
    increasing = np.array(blocked_rates[:-1] < blocked_rates[1:])#does NOT work with lists
    inflect_up, inflect_down = np.zeros(len(blocked_rates), dtype = bool), np.zeros(len(blocked_rates), dtype = bool)

    inflect_up[1:-1] = np.array(increasing[:-1] < increasing[1:])#not increasing then is increasing; apparent have to wrap in list
    inflect_down[1:-1] = np.array(increasing[:-1] > increasing[1:])
    inflect_up[np.array([0,-1])] = [increasing[0], False]#buy on first hour if increases after that, don't buy on last 
    inflect_down[np.array([0,-1])] = [False, increasing[-1]]#can't sell while empty; sell on last if increased up to that point
 
    possible_profits = blocked_rates[inflect_down] - blocked_rates[inflect_up]
    profits = np.zeros(len(hourly_rates)//24 + 1)
    day = 0
    for i in range(len(hourly_rates)//24 + 1):
        num_possible = np.sum(inflect_up[i*24:i*24+24])
        profits[i] = np.max(possible_profits[day:day + num_possible])#can only charge once per day(could discharge twice)
        day += num_possible
    return(profits)
        
def best_of_block2(hourly_rates = hourly_rates):
    "Python2 version when no longer supported; needs to take out numpy"
    #ugly BS way
    blocked_rates = [sum(hourly_rates[i:i+4])/4 for i in range(len(hourly_rates) - 4)]
    mn = 0
    mx = 0
    was_increasing = False
    possible_profits = []
    profits = {i:0 for i in range(math.ceil(len(blocked_rates)/24))}
    for i in range(len(blocked_rates) - 1):
        if blocked_rates[i] < blocked_rates[i+1]:#increasing
            if not was_increasing:
                mn = blocked_rates[i]
            was_increasing = True
            
        elif blocked_rates[i] > blocked_rates[i+1]:#decreasing
            if was_increasing:
                mx = blocked_rates[i]
                possible_profits.append(mx - mn)
                profits[i//24] = max(profits[i//24], mx - mn)
                #make dict and compare key each time; must dis and re charge in same day
            was_increasing = False
    return profits.values()
                
                
timeit.timeit("best_of_block2()", setup = "import numpy as np; import pandas as pd; import matplotlib.pyplot as plt; import random; import math; hourly_rates = np.random.randint(0, high = 10, size = 110); from __main__ import best_of_block2;from __main__ import best_of_block1;", number = 1000)
#print(list(best_of_block2()), best_of_block1())
#need to reconcile differences


#%%######################################################################
#scenario: battery can partially charge/discharge at will, up to 4 times per day
#can't just use current as that relies on changes at lowest. 

#check near changes near bottom, at top.
#have all local minimia, maxima; need to "hunt around" those points.

increasing = np.array(hourly_rates[:-1] < hourly_rates[1:])#does NOT work with lists

#pre-define inflect_up?Grib

inflect_up = list(increasing[:-1] < increasing[1:])#not increasing then is increasing; apparent have to wrap in list
inflect_up = [increasing[0]] + inflect_up + [False]#buy on first hour if increases after that, don't buy on last
inflect_down = list(increasing[:-1] > increasing[1:])
inflect_down = [False] + inflect_down + [increasing[-1]]#can't sell while empty; sell on last if increased up to that point
#possible_trade = ["hold" if i == j else "charge" if i else "discharge" for i,j in zip(inflect_up, inflect_down)]
possible_profits = blocked_rates[inflect_down] - blocked_rates[inflect_up]
profits = np.zeros(len(hourly_rates)//24 + 1)
which_trade = np.zeros(len(hourly_rates)//24 + 1, dtype = int)
day = 0

for i in range(len(hourly_rates)//24 + 1):
    num_possible = np.sum(inflect_up[i*24:i*24+24])
    profits[i] = np.max(possible_profits[day:day + num_possible])
    
    which_trade[i] = list(possible_profits[day:day + num_possible]).index(profits[i])
    which_trade[i] = i*24 + np.flatnonzero(np.array(inflect_up[i*24:i*24+24]) == True)[which_trade[i]]

    day += num_possible

#plotting
a = ["black" if i == j else "green" if i else "red" for i,j in zip(inflect_up, inflect_down)]
plot_lmt = 40
dayz = plot_lmt//24 #math.ceil(plot_lmt/24)
plt.bar(range(len(blocked_rates[:plot_lmt])), blocked_rates[:plot_lmt], color = a)
for i in range(len(blocked_rates[:plot_lmt])//24 + 1):#deliniates days
    plt.axvline(x = i*24)#change type? 
plt.scatter(which_trade[:dayz], profits[:dayz] + blocked_rates[which_trade[:dayz]])



#%%
#scenario: battery must completely charge then discharge, but can wait between doing so.(Reduction to knapsack problem?)
